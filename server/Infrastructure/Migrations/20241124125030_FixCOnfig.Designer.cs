// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20241124125030_FixCOnfig")]
    partial class FixCOnfig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Areas", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccupiedHouses")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalHouses")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Areas", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Customers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Core.Entities.FeedInTakeDetails", b =>
                {
                    b.Property<string>("FeedInTakeId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.Property<string>("FeedId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<decimal?>("AcceptedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ExpectedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ReceivedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("RejectedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FeedInTakeId", "FeedId");

                    b.HasIndex("FeedId");

                    b.ToTable("FeedInTakeDetails", (string)null);
                });

            modelBuilder.Entity("Core.Entities.FeedInTakes", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("ApprovedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeliveryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("Deposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("IsInStock")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("RemainingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SuppliersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("SuppliersId");

                    b.ToTable("FeedInTakes", (string)null);
                });

            modelBuilder.Entity("Core.Entities.FeedTypes", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalProducts")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("FeedTypes", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Feeds", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AreasId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FeedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FeedPerPig")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FeedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FeedTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AreasId");

                    b.HasIndex("FeedTypeId");

                    b.ToTable("Feeds", (string)null);
                });

            modelBuilder.Entity("Core.Entities.FoodExport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ExportBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ExportDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("FoodExport", (string)null);
                });

            modelBuilder.Entity("Core.Entities.FoodExportDetail", b =>
                {
                    b.Property<string>("FoodExportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FoodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FoodExportId", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodExportDetail", (string)null);
                });

            modelBuilder.Entity("Core.Entities.FoodImportDetails", b =>
                {
                    b.Property<string>("FoodImportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FoodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("ActualQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DeliveredQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ExpectedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("RejectedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FoodImportId", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodImportDetails", (string)null);
                });

            modelBuilder.Entity("Core.Entities.FoodImportRequestDetails", b =>
                {
                    b.Property<string>("FoodImportRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FoodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("ExpectedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FoodImportRequestId", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodImportRequestDetails", (string)null);
                });

            modelBuilder.Entity("Core.Entities.FoodImportRequests", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("ApprovedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("FoodImportRequests", (string)null);
                });

            modelBuilder.Entity("Core.Entities.FoodImports", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeliveredTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("DepositAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("ExpectedDeliveryTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FoodImportRequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ReceivedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("StockedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("FoodImportRequestId");

                    b.HasIndex("SupplierId");

                    b.ToTable("FoodImports", (string)null);
                });

            modelBuilder.Entity("Core.Entities.FoodSuppliers", b =>
                {
                    b.Property<string>("FoodsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SuppliersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FoodsId", "SuppliersId");

                    b.HasIndex("SuppliersId");

                    b.ToTable("FoodSuppliers", (string)null);
                });

            modelBuilder.Entity("Core.Entities.FoodTypes", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalProducts")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("FoodTypes", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Foods", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AreasId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodTypesId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("MealsPerDay")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("QuantityInStock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("QuantityPerMeal")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AreasId");

                    b.HasIndex("FoodTypesId");

                    b.ToTable("Foods", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MedicineImport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeliveryTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("ExpectedDeliveryTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("ReceivedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestMedicineId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("StockTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("RequestMedicineId");

                    b.HasIndex("SupplierId");

                    b.ToTable("MedicineImport", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MedicineImportDetail", b =>
                {
                    b.Property<string>("MedicineImportId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicineId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AcceptedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ExpectedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ReceivedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("RejectedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MedicineImportId", "MedicineId");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicineImportDetail", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MedicineSupplier", b =>
                {
                    b.Property<string>("MedicineId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SupplierId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("MedicineId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("MedicineSuppliers");
                });

            modelBuilder.Entity("Core.Entities.Medicines", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DaysAfterImport")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVaccine")
                        .HasColumnType("bit");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("QuantityInStock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medicines", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MovePigDetails", b =>
                {
                    b.Property<string>("MovePigId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PigId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FromStable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToStable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovePigId", "PigId");

                    b.HasIndex("PigId");

                    b.ToTable("MovePigDetails", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MovePigs", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FromArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MoveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPigs")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("MovePig", (string)null);
                });

            modelBuilder.Entity("Core.Entities.PigExamination", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExaminationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ExaminationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExaminationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicineId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.ToTable("PigExamination", (string)null);
                });

            modelBuilder.Entity("Core.Entities.PigExaminationDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHealthy")
                        .HasColumnType("bit");

                    b.Property<string>("PigExaminationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PigId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TreatmentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PigExaminationId");

                    b.HasIndex("PigId");

                    b.ToTable("PigExaminationDetail", (string)null);
                });

            modelBuilder.Entity("Core.Entities.PigExaminationMedicine", b =>
                {
                    b.Property<string>("PigExaminationDetailId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicineId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("PigExaminationDetailId", "MedicineId");

                    b.HasIndex("MedicineId");

                    b.ToTable("PigExaminationMedicine", (string)null);
                });

            modelBuilder.Entity("Core.Entities.PigExport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExportDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("PigExport", (string)null);
                });

            modelBuilder.Entity("Core.Entities.PigExportDetail", b =>
                {
                    b.Property<string>("PigExportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PigId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("ActualWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("PigExportId", "PigId");

                    b.HasIndex("PigId");

                    b.ToTable("PigExportDetail", (string)null);
                });

            modelBuilder.Entity("Core.Entities.PigExportRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("ApprovalDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RequestDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("PigExportRequest", (string)null);
                });

            modelBuilder.Entity("Core.Entities.PigExportRequestDetail", b =>
                {
                    b.Property<string>("PigExportRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PigId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("CurrentWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("HealthStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PigExportRequestId", "PigId");

                    b.HasIndex("PigId");

                    b.ToTable("PigExportRequestDetail", (string)null);
                });

            modelBuilder.Entity("Core.Entities.PigIntakes", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AcceptedQuantity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ApprovedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeliveryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("Deposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ExpectedQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("ReceivedQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("RejectedQuantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("RemainingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("StokeDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SuppliersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("SuppliersId");

                    b.ToTable("PigIntakes", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Pigs", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeathDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeathNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeathReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("HandlingMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HandlingNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("SoldDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("StableId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("StableId");

                    b.ToTable("Pigs", (string)null);
                });

            modelBuilder.Entity("Core.Entities.RequestMedicine", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RequestDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("RequestMedicine", (string)null);
                });

            modelBuilder.Entity("Core.Entities.RequestMedicineDetail", b =>
                {
                    b.Property<string>("RequestMedicineId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicineId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("RequestMedicineId", "MedicineId");

                    b.HasIndex("MedicineId");

                    b.ToTable("RequestMedicineDetail", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Stables", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AreasId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CurrentOccupancy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Humidity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Temperature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AreasId");

                    b.ToTable("Stables", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Suppliers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeSuppier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Suppliers", (string)null);
                });

            modelBuilder.Entity("Core.Entities.VaccinationPlan", b =>
                {
                    b.Property<string>("PigId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicineId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PigId", "MedicineId");

                    b.HasIndex("MedicineId");

                    b.ToTable("VaccinationPlan", (string)null);
                });

            modelBuilder.Entity("Core.Entities.WeighingDetail", b =>
                {
                    b.Property<string>("WeighingHistoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PigId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("WeighingHistoryId", "PigId");

                    b.HasIndex("PigId");

                    b.ToTable("WeighingDetail", (string)null);
                });

            modelBuilder.Entity("Core.Entities.WeighingHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AverageWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPigs")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("WeighingDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("WeighingHistory", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("Core.Entities.FeedInTakeDetails", b =>
                {
                    b.HasOne("Core.Entities.Feeds", "Feeds")
                        .WithMany()
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.FeedInTakes", "FeedInTakes")
                        .WithMany("FeedInTakeDetails")
                        .HasForeignKey("FeedInTakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedInTakes");

                    b.Navigation("Feeds");
                });

            modelBuilder.Entity("Core.Entities.FeedInTakes", b =>
                {
                    b.HasOne("Core.Entities.Suppliers", "Suppliers")
                        .WithMany()
                        .HasForeignKey("SuppliersId");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("Core.Entities.Feeds", b =>
                {
                    b.HasOne("Core.Entities.Areas", "Areas")
                        .WithMany("Feeds")
                        .HasForeignKey("AreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.FeedTypes", "FeedTypes")
                        .WithMany("Feeds")
                        .HasForeignKey("FeedTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Areas");

                    b.Navigation("FeedTypes");
                });

            modelBuilder.Entity("Core.Entities.FoodExportDetail", b =>
                {
                    b.HasOne("Core.Entities.FoodExport", "FoodExport")
                        .WithMany("FoodExportDetails")
                        .HasForeignKey("FoodExportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Foods", "Food")
                        .WithMany("FoodExportDetails")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("FoodExport");
                });

            modelBuilder.Entity("Core.Entities.FoodImportDetails", b =>
                {
                    b.HasOne("Core.Entities.Foods", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.FoodImports", "FoodImports")
                        .WithMany("FoodImportDetails")
                        .HasForeignKey("FoodImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("FoodImports");
                });

            modelBuilder.Entity("Core.Entities.FoodImportRequestDetails", b =>
                {
                    b.HasOne("Core.Entities.Foods", "Foods")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.FoodImportRequests", "FoodImportRequests")
                        .WithMany("FoodImportRequestDetails")
                        .HasForeignKey("FoodImportRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodImportRequests");

                    b.Navigation("Foods");
                });

            modelBuilder.Entity("Core.Entities.FoodImports", b =>
                {
                    b.HasOne("Core.Entities.FoodImportRequests", "FoodImportRequests")
                        .WithMany("FoodImports")
                        .HasForeignKey("FoodImportRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Suppliers", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodImportRequests");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Core.Entities.FoodSuppliers", b =>
                {
                    b.HasOne("Core.Entities.Foods", "Foods")
                        .WithMany("FoodSuppliers")
                        .HasForeignKey("FoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Suppliers", "Suppliers")
                        .WithMany("FoodSuppliers")
                        .HasForeignKey("SuppliersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Foods");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("Core.Entities.Foods", b =>
                {
                    b.HasOne("Core.Entities.Areas", "Areas")
                        .WithMany("Foods")
                        .HasForeignKey("AreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.FoodTypes", "FoodTypes")
                        .WithMany("Foods")
                        .HasForeignKey("FoodTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Areas");

                    b.Navigation("FoodTypes");
                });

            modelBuilder.Entity("Core.Entities.MedicineImport", b =>
                {
                    b.HasOne("Core.Entities.RequestMedicine", "RequestMedicine")
                        .WithMany("MedicineImports")
                        .HasForeignKey("RequestMedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Suppliers", "Suppliers")
                        .WithMany("MedicineImports")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestMedicine");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("Core.Entities.MedicineImportDetail", b =>
                {
                    b.HasOne("Core.Entities.Medicines", "Medicines")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MedicineImport", "MedicineImport")
                        .WithMany("MedicineImportDetails")
                        .HasForeignKey("MedicineImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicineImport");

                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("Core.Entities.MedicineSupplier", b =>
                {
                    b.HasOne("Core.Entities.Medicines", "Medicines")
                        .WithMany("MedicineSuppliers")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Suppliers", "Suppliers")
                        .WithMany("MedicineSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicines");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("Core.Entities.MovePigDetails", b =>
                {
                    b.HasOne("Core.Entities.MovePigs", "MovePigs")
                        .WithMany("MovePigDetails")
                        .HasForeignKey("MovePigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Pigs", "Pig")
                        .WithMany("MovePigDetails")
                        .HasForeignKey("PigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovePigs");

                    b.Navigation("Pig");
                });

            modelBuilder.Entity("Core.Entities.PigExamination", b =>
                {
                    b.HasOne("Core.Entities.Medicines", "Medicine")
                        .WithMany("PigExaminations")
                        .HasForeignKey("MedicineId");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Core.Entities.PigExaminationDetail", b =>
                {
                    b.HasOne("Core.Entities.PigExamination", "PigExamination")
                        .WithMany("PigExaminationDetails")
                        .HasForeignKey("PigExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Pigs", "Pig")
                        .WithMany("PigExaminationDetails")
                        .HasForeignKey("PigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pig");

                    b.Navigation("PigExamination");
                });

            modelBuilder.Entity("Core.Entities.PigExaminationMedicine", b =>
                {
                    b.HasOne("Core.Entities.Medicines", "Medicine")
                        .WithMany("PigExaminationMedicines")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.PigExaminationDetail", "PigExaminationDetail")
                        .WithMany("PigExaminationMedicines")
                        .HasForeignKey("PigExaminationDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("PigExaminationDetail");
                });

            modelBuilder.Entity("Core.Entities.PigExport", b =>
                {
                    b.HasOne("Core.Entities.Customers", "Customers")
                        .WithMany("PigExports")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Core.Entities.PigExportDetail", b =>
                {
                    b.HasOne("Core.Entities.PigExport", "PigExport")
                        .WithMany("Details")
                        .HasForeignKey("PigExportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Pigs", "Pig")
                        .WithMany()
                        .HasForeignKey("PigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pig");

                    b.Navigation("PigExport");
                });

            modelBuilder.Entity("Core.Entities.PigExportRequestDetail", b =>
                {
                    b.HasOne("Core.Entities.PigExportRequest", "PigExportRequest")
                        .WithMany("Details")
                        .HasForeignKey("PigExportRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Pigs", "Pig")
                        .WithMany()
                        .HasForeignKey("PigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pig");

                    b.Navigation("PigExportRequest");
                });

            modelBuilder.Entity("Core.Entities.PigIntakes", b =>
                {
                    b.HasOne("Core.Entities.Suppliers", "Suppliers")
                        .WithMany("PigIntakes")
                        .HasForeignKey("SuppliersId");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("Core.Entities.Pigs", b =>
                {
                    b.HasOne("Core.Entities.Stables", "Stables")
                        .WithMany("Pigs")
                        .HasForeignKey("StableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stables");
                });

            modelBuilder.Entity("Core.Entities.RequestMedicineDetail", b =>
                {
                    b.HasOne("Core.Entities.Medicines", "Medicines")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.RequestMedicine", "RequestMedicine")
                        .WithMany("Details")
                        .HasForeignKey("RequestMedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicines");

                    b.Navigation("RequestMedicine");
                });

            modelBuilder.Entity("Core.Entities.Stables", b =>
                {
                    b.HasOne("Core.Entities.Areas", "Areas")
                        .WithMany("Stables")
                        .HasForeignKey("AreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Areas");
                });

            modelBuilder.Entity("Core.Entities.VaccinationPlan", b =>
                {
                    b.HasOne("Core.Entities.Medicines", "Medicine")
                        .WithMany("VaccinationPlans")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Pigs", "Pigs")
                        .WithMany("VaccinationPlans")
                        .HasForeignKey("PigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Pigs");
                });

            modelBuilder.Entity("Core.Entities.WeighingDetail", b =>
                {
                    b.HasOne("Core.Entities.Pigs", "Pigs")
                        .WithMany("WeighingDetails")
                        .HasForeignKey("PigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.WeighingHistory", "WeighingHistory")
                        .WithMany("WeighingDetails")
                        .HasForeignKey("WeighingHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pigs");

                    b.Navigation("WeighingHistory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Areas", b =>
                {
                    b.Navigation("Feeds");

                    b.Navigation("Foods");

                    b.Navigation("Stables");
                });

            modelBuilder.Entity("Core.Entities.Customers", b =>
                {
                    b.Navigation("PigExports");
                });

            modelBuilder.Entity("Core.Entities.FeedInTakes", b =>
                {
                    b.Navigation("FeedInTakeDetails");
                });

            modelBuilder.Entity("Core.Entities.FeedTypes", b =>
                {
                    b.Navigation("Feeds");
                });

            modelBuilder.Entity("Core.Entities.FoodExport", b =>
                {
                    b.Navigation("FoodExportDetails");
                });

            modelBuilder.Entity("Core.Entities.FoodImportRequests", b =>
                {
                    b.Navigation("FoodImportRequestDetails");

                    b.Navigation("FoodImports");
                });

            modelBuilder.Entity("Core.Entities.FoodImports", b =>
                {
                    b.Navigation("FoodImportDetails");
                });

            modelBuilder.Entity("Core.Entities.FoodTypes", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("Core.Entities.Foods", b =>
                {
                    b.Navigation("FoodExportDetails");

                    b.Navigation("FoodSuppliers");
                });

            modelBuilder.Entity("Core.Entities.MedicineImport", b =>
                {
                    b.Navigation("MedicineImportDetails");
                });

            modelBuilder.Entity("Core.Entities.Medicines", b =>
                {
                    b.Navigation("MedicineSuppliers");

                    b.Navigation("PigExaminationMedicines");

                    b.Navigation("PigExaminations");

                    b.Navigation("VaccinationPlans");
                });

            modelBuilder.Entity("Core.Entities.MovePigs", b =>
                {
                    b.Navigation("MovePigDetails");
                });

            modelBuilder.Entity("Core.Entities.PigExamination", b =>
                {
                    b.Navigation("PigExaminationDetails");
                });

            modelBuilder.Entity("Core.Entities.PigExaminationDetail", b =>
                {
                    b.Navigation("PigExaminationMedicines");
                });

            modelBuilder.Entity("Core.Entities.PigExport", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Core.Entities.PigExportRequest", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Core.Entities.Pigs", b =>
                {
                    b.Navigation("MovePigDetails");

                    b.Navigation("PigExaminationDetails");

                    b.Navigation("VaccinationPlans");

                    b.Navigation("WeighingDetails");
                });

            modelBuilder.Entity("Core.Entities.RequestMedicine", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("MedicineImports");
                });

            modelBuilder.Entity("Core.Entities.Stables", b =>
                {
                    b.Navigation("Pigs");
                });

            modelBuilder.Entity("Core.Entities.Suppliers", b =>
                {
                    b.Navigation("FoodSuppliers");

                    b.Navigation("MedicineImports");

                    b.Navigation("MedicineSuppliers");

                    b.Navigation("PigIntakes");
                });

            modelBuilder.Entity("Core.Entities.WeighingHistory", b =>
                {
                    b.Navigation("WeighingDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
